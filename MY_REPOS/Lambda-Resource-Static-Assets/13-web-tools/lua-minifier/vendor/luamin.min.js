/*
 https://lambda-w-1-notes.netlify.app/13-web-tools/luamin v1.0.2 by @bgoonz */
"use strict";
(function (w) {
  function H(b) {
    switch (b.length) {
      case 2:
        return "do" == b || "if" == b || "in" == b || "or" == b;
      case 3:
        return (
          "and" == b || "end" == b || "for" == b || "nil" == b || "not" == b
        );
      case 4:
        return "else" == b || "goto" == b || "then" == b || "true" == b;
      case 5:
        return (
          "break" == b ||
          "false" == b ||
          "local" == b ||
          "until" == b ||
          "while" == b
        );
      case 6:
        return "elseif" == b || "repeat" == b || "return" == b;
      case 8:
        return "function" == b;
    }
    return !1;
  }
  var t = "object" == typeof exports && exports,
    A = "object" == typeof module && module && module.exports == t && module,
    p = "object" == typeof global && global;
  if (p.global === p || p.window === p) w = p;
  p = w.luaparse || require("luaparse");
  p.defaultOptions.comments = !1;
  p.defaultOptions.scope = !0;
  var I = p.parse,
    B = /[a-zA-Z_]/,
    J = /[a-zA-Z0-9_]/,
    K = /[0-9]/,
    C = {
      or: 1,
      and: 2,
      "<": 3,
      ">": 3,
      "<=": 3,
      ">=": 3,
      "~=": 3,
      "==": 3,
      "..": 5,
      "+": 6,
      "-": 6,
      "*": 7,
      "/": 7,
      "%": 7,
      unarynot: 8,
      "unary#": 8,
      "unary-": 8,
      "^": 10,
    },
    x = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".split(
      ""
    ),
    L = x.length - 1,
    h = function (b, a) {
      for (var c = -1, d = b.length, e = d - 1; ++c < d; ) a(b[c], c < e);
    },
    y = function (b, a) {
      for (var c = -1, d = b.length; ++c < d; ) if (b[c] == a) return c;
    },
    D = {}.hasOwnProperty,
    E = function (b, a) {
      var c;
      if (a) for (c in a) D.call(a, c) && (b[c] = a[c]);
      return b;
    },
    F = function (b) {
      var a = "0",
        c = "";
      if (1 > b) return c;
      if (1 == b) return a;
      for (; b; ) if ((b & 1 && (c += a), (b >>= 1))) a += a;
      return c;
    },
    l,
    q,
    u,
    m = function (b) {
      if ("self" == b) return b;
      if (D.call(q, b)) return q[b];
      for (var a = l.length, c = a - 1, d; 0 <= c; ) {
        d = l.charAt(c);
        d = y(x, d);
        if (d != L)
          return (
            (l = l.substring(0, c) + x[d + 1] + F(a - (c + 1))),
            H(l) || -1 < y(u, l) ? m(b) : (q[b] = l)
          );
        --c;
      }
      l = "a" + F(a);
      return -1 < y(u, l) ? m(b) : (q[b] = l);
    },
    f = function (b, a, c) {
      c || (c = " ");
      var d = b.slice(-1),
        e = a.charAt(0);
      return "" == d || "" == e
        ? b + a
        : B.test(d)
        ? J.test(e)
          ? b + c + a
          : b + a
        : K.test(d)
        ? "(" == e || ("." != e && !B.test(e))
          ? b + a
          : b + c + a
        : d == e && "-" == d
        ? b + c + a
        : b + a;
    },
    z = function (b) {
      var a = "",
        c = b.type;
      (c =
        b.inParens &&
        ("BinaryExpression" == c ||
          "FunctionDeclaration" == c ||
          "TableConstructorExpression" == c)) && (a += "(");
      a += g(b);
      c && (a += ")");
      return a;
    },
    g = function (b, a) {
      a = E({ precedence: 0, preserveIdentifiers: !1 }, a);
      var c = "";
      var d = b.type;
      if ("Identifier" == d)
        c = b.isLocal && !a.preserveIdentifiers ? m(b.name) : b.name;
      else if (
        "StringLiteral" == d ||
        "NumericLiteral" == d ||
        "BooleanLiteral" == d ||
        "NilLiteral" == d ||
        "VarargLiteral" == d
      )
        c = b.raw;
      else if ("LogicalExpression" == d || "BinaryExpression" == d) {
        var e = b.operator;
        d = C[e];
        var G = "left";
        c = g(b.left, { precedence: d, direction: "left", parent: e });
        c = f(c, e);
        c = f(c, g(b.right, { precedence: d, direction: "right", parent: e }));
        if ("^" == e || ".." == e) G = "right";
        if (
          d < a.precedence ||
          (d == a.precedence &&
            G != a.direction &&
            "+" != a.parent &&
            ("*" != a.parent || ("/" != e && "*" != e)))
        )
          c = "(" + c + ")";
      } else if ("UnaryExpression" == d)
        (e = b.operator),
          (d = C["unary" + e]),
          (c = f(e, g(b.argument, { precedence: d }))),
          d < a.precedence &&
            ("^" != a.parent || "right" != a.direction) &&
            (c = "(" + c + ")");
      else if ("CallExpression" == d)
        (c = z(b.base) + "("),
          h(b.arguments, function (k, r) {
            c += g(k);
            r && (c += ",");
          }),
          (c += ")");
      else if ("TableCallExpression" == d) c = g(b.base) + g(b.arguments);
      else if ("StringCallExpression" == d) c = g(b.base) + g(b.argument);
      else if ("IndexExpression" == d) c = z(b.base) + "[" + g(b.index) + "]";
      else if ("MemberExpression" == d)
        c =
          z(b.base) + b.indexer + g(b.identifier, { preserveIdentifiers: !0 });
      else if ("FunctionDeclaration" == d)
        (c = "function("),
          b.parameters.length &&
            h(b.parameters, function (k, r) {
              c += k.name ? m(k.name) : k.value;
              r && (c += ",");
            }),
          (c += ")"),
          (c = f(c, n(b.body))),
          (c = f(c, "end"));
      else if ("TableConstructorExpression" == d)
        (c = "{"),
          h(b.fields, function (k, r) {
            c =
              "TableKey" == k.type
                ? c + ("[" + g(k.key) + "]=" + g(k.value))
                : "TableValue" == k.type
                ? c + g(k.value)
                : c +
                  (g(k.key, { preserveIdentifiers: !0 }) + "=" + g(k.value));
            r && (c += ",");
          }),
          (c += "}");
      else throw TypeError("Unknown expression type: `" + d + "`");
      return c;
    },
    n = function (b) {
      var a = "";
      h(b, function (c) {
        a = f(a, M(c), ";");
      });
      return a;
    },
    M = function (b) {
      var a = "",
        c = b.type;
      if ("AssignmentStatement" == c)
        h(b.variables, function (d, e) {
          a += g(d);
          e && (a += ",");
        }),
          (a += "="),
          h(b.init, function (d, e) {
            a += g(d);
            e && (a += ",");
          });
      else if ("LocalStatement" == c)
        (a = "local "),
          h(b.variables, function (d, e) {
            a += m(d.name);
            e && (a += ",");
          }),
          b.init.length &&
            ((a += "="),
            h(b.init, function (d, e) {
              a += g(d);
              e && (a += ",");
            }));
      else if ("CallStatement" == c) a = g(b.expression);
      else if ("IfStatement" == c)
        (a = f("if", g(b.clauses[0].condition))),
          (a = f(a, "then")),
          (a = f(a, n(b.clauses[0].body))),
          h(b.clauses.slice(1), function (d) {
            d.condition
              ? ((a = f(a, "elseif")),
                (a = f(a, g(d.condition))),
                (a = f(a, "then")))
              : (a = f(a, "else"));
            a = f(a, n(d.body));
          }),
          (a = f(a, "end"));
      else if ("WhileStatement" == c)
        (a = f("while", g(b.condition))),
          (a = f(a, "do")),
          (a = f(a, n(b.body))),
          (a = f(a, "end"));
      else if ("DoStatement" == c) (a = f("do", n(b.body))), (a = f(a, "end"));
      else if ("ReturnStatement" == c)
        (a = "return"),
          h(b.arguments, function (d, e) {
            a = f(a, g(d));
            e && (a += ",");
          });
      else if ("BreakStatement" == c) a = "break";
      else if ("RepeatStatement" == c)
        (a = f("repeat", n(b.body))),
          (a = f(a, "until")),
          (a = f(a, g(b.condition)));
      else if ("FunctionDeclaration" == c)
        (a = (b.isLocal ? "local " : "") + "function "),
          (a += g(b.identifier)),
          (a += "("),
          b.parameters.length &&
            h(b.parameters, function (d, e) {
              a += d.name ? m(d.name) : d.value;
              e && (a += ",");
            }),
          (a += ")"),
          (a = f(a, n(b.body))),
          (a = f(a, "end"));
      else if ("ForGenericStatement" == c)
        (a = "for "),
          h(b.variables, function (d, e) {
            a += m(d.name);
            e && (a += ",");
          }),
          (a += " in"),
          h(b.iterators, function (d, e) {
            a = f(a, g(d));
            e && (a += ",");
          }),
          (a = f(a, "do")),
          (a = f(a, n(b.body))),
          (a = f(a, "end"));
      else if ("ForNumericStatement" == c)
        (a = "for " + m(b.variable.name) + "="),
          (a += g(b.start) + "," + g(b.end)),
          b.step && (a += "," + g(b.step)),
          (a = f(a, "do")),
          (a = f(a, n(b.body))),
          (a = f(a, "end"));
      else if ("LabelStatement" == c) a = "::" + m(b.label.name) + "::";
      else if ("GotoStatement" == c) a = "goto " + m(b.label.name);
      else throw TypeError("Unknown statement type: `" + c + "`");
      return a;
    },
    v = {
      version: "1.0.2",
      minify: function (b) {
        b = "string" == typeof b ? I(b) : b;
        q = {};
        u = [];
        l = "9";
        if (b.globals)
          h(b.globals, function (a) {
            a = a.name;
            q[a] = a;
            u.push(a);
          });
        else throw Error("Missing required AST property: `globals`");
        return n(b.body);
      },
    };
  "function" == typeof define && "object" == typeof define.amd && define.amd
    ? define(function () {
        return v;
      })
    : t && !t.nodeType
    ? A
      ? (A.exports = v)
      : E(t, v)
    : (w.luamin = v);
})(this);
